#!/usr/bin/env python3
"""
Supabase Uploader for Acely Student Data

This script uploads scraped Acely student data to a Supabase database.
It reads the JSON file generated by the scraper and inserts the data
into the acely_students table.
"""

import json
import os
import sys
from datetime import datetime
from typing import Dict, Any, List
import glob
from dotenv import load_dotenv

try:
    from supabase import create_client, Client
except ImportError:
    print("‚ùå supabase package not found. Install it with:")
    print("pip install supabase")
    sys.exit(1)

# Load environment variables
load_dotenv()

class SupabaseUploader:
    """Handles uploading Acely student data to Supabase"""
    
    def __init__(self):
        # Get Supabase credentials from environment variables
        self.supabase_url = os.getenv("SUPABASE_URL")
        self.supabase_key = os.getenv("SUPABASE_ANON_KEY")
        
        if not self.supabase_url or not self.supabase_key:
            print("‚ùå Missing Supabase credentials!")
            print("Please add to your .env file:")
            print("SUPABASE_URL=your_supabase_project_url")
            print("SUPABASE_ANON_KEY=your_supabase_anon_key")
            sys.exit(1)
        
        # Initialize Supabase client
        try:
            self.supabase: Client = create_client(self.supabase_url, self.supabase_key)
            print("‚úÖ Connected to Supabase")
        except Exception as e:
            print(f"‚ùå Failed to connect to Supabase: {e}")
            sys.exit(1)
    
    def transform_student_data(self, scrape_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Transform the scraped JSON data into database-ready format"""
        
        # Extract top-level scraping metadata
        scrape_timestamp = scrape_data.get("timestamp")
        
        # Process each student's data
        student_records = []
        student_data = scrape_data.get("student_data", {})
        
        for email, data in student_data.items():
            # Handle error cases
            if "error" in data:
                record = {
                    "scrape_timestamp": scrape_timestamp,
                    "student_email": email,
                    "student_timestamp": data.get("timestamp"),
                    "most_recent_score": None,
                    "student_name": None,
                    "join_date": None,
                    "this_week_questions": None,
                    "last_week_questions": None,
                    "performance_by_topic": {},
                    "weekly_performance": {},
                    "daily_activity": {},
                    "strongest_weakest_areas": {},
                    "analytics_data": {},
                    "assignments": [],
                    "mock_exam_results": [],
                    "raw_sections": {}
                }
                student_records.append(record)
                continue
            
            # Extract profile information - check both old nested structure and new flat structure
            profile_info = data.get("profile_info", {})
            
            # Create the database record
            record = {
                # Scraping metadata
                "scrape_timestamp": scrape_timestamp,
                
                # Student basic info
                "student_email": email,
                "student_timestamp": data.get("timestamp"),
                
                # Flattened profile information - try both new flat structure and old nested structure
                "most_recent_score": data.get("most_recent_score") or profile_info.get("most_recent_score"),
                "student_name": data.get("student_name") or profile_info.get("student_name"),
                "join_date": data.get("join_date") or profile_info.get("join_date"),
                "this_week_questions": data.get("this_week_questions") or profile_info.get("this_week_questions"),
                "last_week_questions": data.get("last_week_questions") or profile_info.get("last_week_questions"),
                
                # Complex nested data as JSON
                "performance_by_topic": data.get("performance_by_topic", {}),
                "weekly_performance": data.get("weekly_performance", {}),
                "daily_activity": data.get("daily_activity", {}),
                "strongest_weakest_areas": data.get("strongest_weakest_areas", {}),
                "analytics_data": data.get("analytics_data", {}),
                "assignments": data.get("assignments", []),
                "mock_exam_results": data.get("mock_exam_results", []),
                "raw_sections": data.get("raw_sections", {})
            }
            
            student_records.append(record)
        
        return student_records
    
    def upload_data_direct(self, scrape_data: Dict[str, Any]) -> bool:
        """Upload scraped data directly to Supabase without saving to JSON file first"""
        
        try:
            # Transform the data
            print("üîÑ Transforming data for database...")
            student_records = self.transform_student_data(scrape_data)
            
            if not student_records:
                print("‚ö†Ô∏è No student records to upload")
                return False
            
            print(f"üìä Uploading {len(student_records)} student records...")
            
            # Insert data into Supabase
            result = self.supabase.table("acely_students").insert(student_records).execute()
            
            if result.data:
                print(f"‚úÖ Successfully uploaded {len(result.data)} records to Supabase!")
                
                # Print summary
                successful_students = [r for r in student_records if r.get("most_recent_score") is not None]
                error_students = [r for r in student_records if r.get("most_recent_score") is None]
                
                print(f"üìà Summary:")
                print(f"   ‚Ä¢ Successful student profiles: {len(successful_students)}")
                print(f"   ‚Ä¢ Error cases: {len(error_students)}")
                print(f"   ‚Ä¢ Total records: {len(student_records)}")
                
                return True
            else:
                print(f"‚ùå Upload failed: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error uploading data to Supabase: {e}")
            return False
    
    def upload_data(self, json_file_path: str) -> bool:
        """Upload data from JSON file to Supabase"""
        
        try:
            # Read the JSON file
            print(f"üìñ Reading data from: {json_file_path}")
            with open(json_file_path, 'r', encoding='utf-8') as f:
                scrape_data = json.load(f)
            
            # Transform the data
            print("üîÑ Transforming data for database...")
            student_records = self.transform_student_data(scrape_data)
            
            if not student_records:
                print("‚ö†Ô∏è No student records to upload")
                return False
            
            print(f"üìä Uploading {len(student_records)} student records...")
            
            # Insert data into Supabase
            result = self.supabase.table("acely_students").insert(student_records).execute()
            
            if result.data:
                print(f"‚úÖ Successfully uploaded {len(result.data)} records to Supabase!")
                
                # Print summary
                successful_students = [r for r in student_records if r.get("most_recent_score") is not None]
                error_students = [r for r in student_records if r.get("most_recent_score") is None]
                
                print(f"üìà Summary:")
                print(f"   ‚Ä¢ Successful student profiles: {len(successful_students)}")
                print(f"   ‚Ä¢ Error cases: {len(error_students)}")
                print(f"   ‚Ä¢ Total records: {len(student_records)}")
                
                return True
            else:
                print(f"‚ùå Upload failed: {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error uploading data: {e}")
            return False
    
    def get_latest_json_file(self) -> str:
        """Find the most recent acely_student_data JSON file"""
        json_files = glob.glob("acely_student_data_*.json")
        if not json_files:
            print("‚ùå No acely_student_data_*.json files found in current directory")
            return None
        
        # Sort by filename (which includes timestamp)
        latest_file = max(json_files)
        print(f"üîç Found latest file: {latest_file}")
        return latest_file

def main():
    """Main function"""
    print("üöÄ Acely Data Uploader to Supabase")
    print("=" * 50)
    
    # Initialize uploader
    uploader = SupabaseUploader()
    
    # Determine which file to upload
    if len(sys.argv) > 1:
        json_file = sys.argv[1]
        if not os.path.exists(json_file):
            print(f"‚ùå File not found: {json_file}")
            sys.exit(1)
    else:
        json_file = uploader.get_latest_json_file()
        if not json_file:
            sys.exit(1)
    
    # Upload the data
    success = uploader.upload_data(json_file)
    
    if success:
        print("\nüéâ Upload completed successfully!")
        print("\nüí° You can now query your data in Supabase with SQL like:")
        print("   SELECT student_name, most_recent_score, subject FROM acely_students;")
        print("   SELECT * FROM acely_students WHERE most_recent_score > 1400;")
        print("   SELECT student_email, jsonb_array_length(mock_exam_results) as exam_count FROM acely_students;")
    else:
        print("\n‚ùå Upload failed!")
        sys.exit(1)

if __name__ == "__main__":
    main() 